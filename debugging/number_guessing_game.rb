# Number Guessing Game

require 'pry'

def valid_integer?(string)
  string.to_i.to_s == string
end

def guess_number(max_number, max_attempts)
  winning_number = (1..max_number).to_a.sample
  attempts = 0

  loop do
    attempts += 1
    break if attempts > max_attempts

    input = nil
    until valid_integer?(input)
      print 'Make a guess: '
      input = gets.chomp
    end

    guess = input.to_i

    if guess == winning_number
      puts 'Yes! You win.'
      break
    else
      puts 'Nope. Too small.' if guess < winning_number
      puts 'Nope. Too big.'   if guess > winning_number

      # "Try again" occurs by re-entering the loop
    end
  end
end

guess_number(10, 3)

=begin

As the code is currently written, the game-playing loop is only exited if the
max attempts is exceeded. The loop should break when the user properly guesses
the winning number. This can be achieved by adding a break keyword to the first
branch of the `if` branch.

But even once we reach the maximum number of attempts, the game might continue
to allow the user to try. This is because the recursive call to `guess_number`
one line 28 results in a whole new loop being created whenever the user picks
the wrong number. The inner loop generated by each recursive call must perform
10 iterations before the max attempts is reached -- which will result in a lot
of recursive calls.

=end